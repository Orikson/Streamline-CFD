#ifndef VPHMCF_H
#define VPHMCF_H

#include <vector>
using std::vector;
#include <glm/glm.hpp>

#include <defines.h>
#include "../fluid.h"

#include <QOpenGLFunctions>
#include <QOpenGLVertexArrayObject>

#ifdef VPH

#ifdef VPH_2D

struct Vertex2D {
	glm::vec2 pos;
	glm::vec2 vel;
	glm::vec2 normal;
	glm::vec2 tangent;

	inline Vertex2D(glm::vec2 position) {
		pos = position;
		vel = glm::vec2(0, 0);
		normal = glm::vec2(0, 0);
		tangent = glm::vec2(0, 0);
	}
};

class Bubble2D : public Fluid {
	public:
		Bubble2D(float parameterize, vector<Vertex2D> vertices, QOpenGLFunctions* f, QObject* parent);
		~Bubble2D();

		void step() override;
		void render() override;

	private:
		// For rendering
		QOpenGLFunctions* f;
		QOpenGLVertexArrayObject* VAO;
		GLuint VBO, EBO;

		void updateVAO();

		// For physics
		size_t n;						// number of vertices
		float area, length;				// area and length of the bubble
		vector<Vertex2D> vertices;		// list of vertices
		float surfaceTension;			// surface tension constant
		
		void regularize();				// evenly distribute vertices over the isosurface generated by the currently existing vertices
		void calcAreaAndLength();		// approximates the area and arc length of the isosurface
		void calcTangents();			// update the tangent vector at each vertex
		void calcCurvatureNormals();	// update the normal curvature vector at each vertex
		void calcNormals();				// update the normal vector at each vertex

};


#endif // VPH_2D

#endif // VPH

#endif // VPHMCF_H